import numpy as np
from scipy.fftpack import dct, idct
import cv2

# 讀取 lena.png 圖片並轉換為灰度
image = cv2.imread("lena.png", cv2.IMREAD_GRAYSCALE)
h, w = image.shape

# 定義8x8區塊的量化表
quantization_table1 = np.array(
    [
        [10, 7, 6, 10, 14, 24, 31, 37],
        [7, 7, 8, 11, 16, 35, 36, 33],
        [8, 8, 10, 14, 24, 34, 41, 34],
        [8, 10, 13, 17, 31, 52, 48, 37],
        [11, 13, 22, 34, 41, 65, 62, 46],
        [14, 21, 33, 38, 49, 62, 68, 55],
        [29, 38, 47, 52, 62, 73, 72, 61],
        [43, 55, 57, 59, 67, 60, 62, 59],
    ]
)
quantization_table2 = np.array(
    [
        [10, 11, 14, 28, 59, 59, 59, 59],
        [11, 13, 16, 40, 59, 59, 59, 59],
        [14, 16, 34, 59, 59, 59, 59, 59],
        [28, 40, 59, 59, 59, 59, 59, 59],
        [59, 59, 59, 59, 59, 59, 59, 59],
        [59, 59, 59, 59, 59, 59, 59, 59],
        [59, 59, 59, 59, 59, 59, 59, 59],
        [59, 59, 59, 59, 59, 59, 59, 59],
    ]
)


# 進行 8x8 DCT、量化和 RLE
def dct_2d(block):
    return dct(dct(block.T, norm="ortho").T, norm="ortho")


def idct_2d(block):
    return idct(idct(block.T, norm="ortho").T, norm="ortho")


def quantize(block, q_table):
    return np.round(block / q_table).astype(int)


def dequantize(block, q_table):
    return (block * q_table).astype(float)


def generate_zigzag_order(n=8):
    zigzag_order = []
    for i in range(2 * n - 1):
        if i % 2 == 0:
            # 偶數對角線：從上到下
            x = min(i, n - 1)
            y = i - x
            while x >= 0 and y < n:
                zigzag_order.append((x, y))
                x -= 1
                y += 1
        else:
            # 奇數對角線：從下到上
            y = min(i, n - 1)
            x = i - y
            while y >= 0 and x < n:
                zigzag_order.append((x, y))
                x += 1
                y -= 1
    return zigzag_order


def zigzag_scan(block):
    zigzag_order = generate_zigzag_order()
    return [block[i, j] for i, j in zigzag_order]


def rle_encode(data):
    encoding = []
    prev = data[0]
    count = 1
    for i in range(1, len(data)):
        if data[i] == prev:
            count += 1
        else:
            encoding.append((prev, count))
            prev = data[i]
            count = 1
    encoding.append((prev, count))
    return encoding


def rle_decode(data):
    decoded = []
    for value, count in data:
        decoded.extend([value] * count)
    return decoded


# 計算 PSNR
def calculate_psnr(original, compressed):
    mse = np.mean((original - compressed) ** 2)
    if mse == 0:
        return float("inf")
    max_pixel = 255.0
    psnr = 10 * np.log10(max_pixel**2 / mse)
    return psnr


# 對每個8x8區塊進行DCT、量化、zigzag掃描和RLE
encoded_blocks1 = []
encoded_blocks2 = []
for i in range(0, h, 8):
    for j in range(0, w, 8):
        block = image[i : i + 8, j : j + 8]
        dct_block = dct_2d(block)

        quantized_block1 = quantize(dct_block, quantization_table1)
        zigzag_data1 = zigzag_scan(quantized_block1)
        encoded_blocks1.append(rle_encode(zigzag_data1))

        quantized_block2 = quantize(dct_block, quantization_table2)
        zigzag_data2 = zigzag_scan(quantized_block2)
        encoded_blocks2.append(rle_encode(zigzag_data2))

# 還原圖片1
decoded_image1 = np.zeros_like(image, dtype=float)
for k, encoded_block in enumerate(encoded_blocks1):
    i = (k // (w // 8)) * 8
    j = (k % (w // 8)) * 8
    decoded_block = np.array(rle_decode(encoded_block)).reshape(8, 8)
    dequantized_block = dequantize(decoded_block, quantization_table1)
    idct_block = idct_2d(dequantized_block)
    decoded_image1[i : i + 8, j : j + 8] = idct_block

# 將圖片值裁剪到有效範圍並保存
decoded_image1 = np.clip(decoded_image1, 0, 255).astype(np.uint8)
cv2.imwrite("decoded_image1.png", decoded_image1)

# 計算 PSNR
psnr_value = calculate_psnr(image, decoded_image1)
print("PSNR_1：", psnr_value)

# 比較壓縮大小
original_size = h * w
compressed_size = sum(len(block) for block in encoded_blocks1)
compression_ratio = original_size / compressed_size
print("Compression ratio:", compression_ratio)


# 還原圖片2
decoded_image2 = np.zeros_like(image, dtype=float)
for k, encoded_block in enumerate(encoded_blocks2):
    i = (k // (w // 8)) * 8
    j = (k % (w // 8)) * 8
    decoded_block = np.array(rle_decode(encoded_block)).reshape(8, 8)
    dequantized_block = dequantize(decoded_block, quantization_table2)
    idct_block = idct_2d(dequantized_block)
    decoded_image2[i : i + 8, j : j + 8] = idct_block

# 將圖片值裁剪到有效範圍並保存
decoded_image2 = np.clip(decoded_image2, 0, 255).astype(np.uint8)
cv2.imwrite("decoded_image2.png", decoded_image2)

# 計算 PSNR
psnr_value = calculate_psnr(image, decoded_image2)
print("PSNR_2：", psnr_value)

# 比較壓縮大小
original_size = h * w
compressed_size = sum(len(block) for block in encoded_blocks2)
compression_ratio = original_size / compressed_size
print("Compression ratio:", compression_ratio)
